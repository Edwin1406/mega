{"version":3,"sources":["alertas.js","app.js","filtradorVentas.js","lector.js"],"names":["alertaCotizador","document","querySelector","setTimeout","remove","maquinaInput","maquinas","maquinasFiltradas","listadoMaquinas","async","url","location","origin","respuesta","fetch","resultado","json","arrayMaquinas","map","maquina","nombre","trim","id","console","log","formatearMaquinas","obtenerMaquinas","addEventListener","e","busqueda","target","value","length","expresion","RegExp","filter","toLowerCase","search","firstChild","removeChild","forEach","maquinaHTML","createElement","classList","add","textContent","dataset","appendChild","noResultado","mostrarMaquinas","filtroVentas","filtro","this","querySelectorAll","fila","cells","nombreCliente","nombreProducto","codigoProducto","estado","includes","style","display","apiUrl","ultimaDeteccion","mostrarNotificacion","mensaje","notificacion","getElementById","Quagga","init","inputStream","type","constraints","facingMode","width","height","decoder","readers","err","error","start","onDetected","data","codigoEscaneado","codeResult","code","ahora","Date","getTime","codigo","status","response","ok","Error","producto","find","p","barcode","color","window","open","buscarProducto"],"mappings":"CAAA,WAEA,MAAAA,EAAAC,SAAAC,cAAA,cACAF,GACAG,WAAA,KACAH,EAAAI,UACA,KANA,GCAA,WACA,MAAAC,EAAAJ,SAAAC,cAAA,eACA,GAAAG,EAAA,CACA,IAAAC,EAAA,GACAC,EAAA,GAEA,MAAAC,EAAAP,SAAAC,cAAA,sBAKAO,iBACA,MAAAC,EAAAC,SAAAC,OAAA,sBACAC,QAAAC,MAAAJ,GACAK,gBAAAF,EAAAG,OAKA,SAAAC,EAAA,IACAX,EAAAW,EAAAC,IAAAC,IACA,CACAC,OAAA,GAAAD,EAAAC,OAAAC,OACAC,GAAAH,EAAAG,MAIAC,QAAAC,IAAAlB,GAZAmB,CAAAV,WARAW,GAEArB,EAAAsB,iBAAA,SAuBA,SAAAC,GACA,MAAAC,EAAAD,EAAAE,OAAAC,MAEA,GAAAF,EAAAG,OAAA,EAAA,CACA,MAAAC,EAAA,IAAAC,OAAAL,EAAA,KACAtB,EAAAD,EAAA6B,OAAAhB,IACA,IAAA,GAAAA,EAAAC,OAAAgB,cAAAC,OAAAJ,GACA,OAAAd,SAKAZ,EAAA,IAKA,WACA,KAAAC,EAAA8B,YACA9B,EAAA+B,YAAA/B,EAAA8B,YAGA,GAAA/B,EAAAyB,OAAA,EACAzB,EAAAiC,QAAArB,IACA,MAAAsB,EAAAxC,SAAAyC,cAAA,MACAD,EAAAE,UAAAC,IAAA,6BACAH,EAAAI,YAAA1B,EAAAC,OACAqB,EAAAK,QAAAxB,GAAAH,EAAAG,GAGAd,EAAAuC,YAAAN,SAGA,CACA,MAAAO,EAAA/C,SAAAyC,cAAA,KACAM,EAAAL,UAAAC,IAAA,kCACAI,EAAAH,YAAA,oBACArC,EAAAuC,YAAAC,IAvBAC,OA9CA,GCAAhD,SAAA0B,iBAAA,oBAAA,WACA,MAAAuB,EAAAjD,SAAAC,cAAA,mBACAgD,GACAA,EAAAvB,iBAAA,SAAA,WACA,MAAAwB,EAAAC,KAAArB,MAAAK,cACAnC,SAAAoD,iBAAA,qBAEAb,QAAAc,IACA,MAAAhC,EAAAgC,EAAAC,MAAA,GAAAV,YAAAT,cACAoB,EAAAF,EAAAC,MAAA,GAAAV,YAAAT,cACAqB,EAAAH,EAAAC,MAAA,GAAAV,YAAAT,cACAsB,EAAAJ,EAAAC,MAAA,GAAAV,YAAAT,cACAuB,EAAAL,EAAAC,MAAA,GAAAV,YAAAT,cAEAb,QAAAC,IAAAF,EAAAkC,EAAAC,EAAAC,EAAAC,GAGArC,EAAAsC,SAAAT,IACAK,EAAAI,SAAAT,IACAM,EAAAG,SAAAT,IACAO,EAAAE,SAAAT,IACAQ,EAAAC,SAAAT,GAEAG,EAAAO,MAAAC,QAAA,GAEAR,EAAAO,MAAAC,QAAA,eCzBA,WACA,MAAAC,EAAApD,SAAAC,OAAA,6BACA,IAAAoD,EAAA,GAIA,SAAAC,EAAAC,GACA,MAAAC,EAAAlE,SAAAmE,eAAA,gBACAD,EAAAtB,YAAAqB,EACAC,EAAAxB,UAAAC,IAAA,WAGAzC,WAAA,KACAgE,EAAAxB,UAAAvC,OAAA,YACA,KAKAiE,OAAAC,KACA,CACAC,YAAA,CACAC,KAAA,aACA1C,OAAA7B,SAAAC,cAAA,YACAuE,YAAA,CACAC,WAAA,cACAC,MAAA,IACAC,OAAA,MAGAC,QAAA,CAAAC,QAAA,CAAA,sBAEA,SAAAC,GACAA,EACAxD,QAAAyD,MAAAD,GAGAV,OAAAY,WAIAZ,OAAAa,WAAAC,IACA,MAAAC,EAAAD,EAAAE,WAAAC,KACAC,GAAA,IAAAC,MAAAC,UAGAzB,EAAAoB,IAAAG,EAAAvB,EAAAoB,GA3CA,MA+CApB,EAAAoB,GAAAG,EACAhE,QAAAC,IAAA,oBAAA4D,GAMA3E,eAAAiF,GACA,MAAAC,EAAA1F,SAAAmE,eAAA,UACA,IACA,MAAAwB,QAAA9E,MAAAiD,GACA,IAAA6B,EAAAC,GAAA,MAAA,IAAAC,MAAA,0BACA,MAGAC,SAHAH,EAAA5E,QAGAgF,KAAAC,GAAAA,EAAAC,UAAAR,GAEAK,GACAJ,EAAA9C,YAAA,YAAA6C,gCACAC,EAAA9B,MAAAsC,MAAA,UAGAlC,EAAA,2CAAA8B,EAAAzE,IAGAnB,WAAA,KACAiG,OAAAC,KAAA,GAAA1F,SAAAC,6CAAAmF,EAAAzE,KAAA,WACA,OAGAqE,EAAA9C,YAAA,UAAA6C,uCACAC,EAAA9B,MAAAsC,MAAA,UAGAlC,EAAA,UAAAyB,qBAEA,MAAAV,GACAzD,QAAAyD,MAAA,+BAAAA,GACAW,EAAA9C,YAAA,+BACA8C,EAAA9B,MAAAsC,MAAA,UAGAlC,EAAA,iCAxCAqC,CAAAlB,MApDA","file":"bundle.js","sourcesContent":["(function() {\r\n\r\n    const alertaCotizador = document.querySelector('div .exito');\r\n    if(alertaCotizador) {\r\n        setTimeout(() => {\r\n            alertaCotizador.remove();\r\n        }, 3000);\r\n    }\r\n\r\n\r\n})();","(function(){\r\n    const maquinaInput = document.querySelector('#maquina_id');\r\n    if(maquinaInput){\r\n        let maquinas= [];\r\n        let maquinasFiltradas = [];\r\n\r\n        const listadoMaquinas = document.querySelector('#listado-maquinas');\r\n        obtenerMaquinas();\r\n\r\n        maquinaInput.addEventListener('input',buscarMaquinas);\r\n\r\n        async function obtenerMaquinas(){\r\n            const url = `${location.origin}/admin/api/maquinas`;;\r\n            const respuesta = await fetch(url);\r\n            resultado = await respuesta.json();\r\n            formatearMaquinas(resultado);\r\n        }\r\n\r\n\r\n        function formatearMaquinas(arrayMaquinas=[]){\r\n            maquinas = arrayMaquinas.map(maquina => {\r\n                return {\r\n                    nombre: `${maquina.nombre.trim()}`,\r\n                    id: maquina.id\r\n                }\r\n            });\r\n\r\n            console.log(maquinas);\r\n\r\n        }\r\n\r\n\r\n        function buscarMaquinas(e){\r\n           const busqueda = e.target.value;\r\n\r\n           if(busqueda.length>3){\r\n            const expresion = new RegExp(busqueda, 'i');\r\n            maquinasFiltradas = maquinas.filter(maquina =>{\r\n                if(maquina.nombre.toLowerCase().search(expresion) != -1){\r\n                    return maquina;\r\n\r\n                }\r\n            });\r\n           }else{\r\n                maquinasFiltradas = [];\r\n           }\r\n           mostrarMaquinas();\r\n        }\r\n\r\n        function mostrarMaquinas(){\r\n            while(listadoMaquinas.firstChild){\r\n                listadoMaquinas.removeChild(listadoMaquinas.firstChild);\r\n            }\r\n\r\n            if(maquinasFiltradas.length >0){\r\n                maquinasFiltradas.forEach (maquina =>{\r\n                    const maquinaHTML = document.createElement('LI');\r\n                    maquinaHTML.classList.add('listado-maquinas__maquina');\r\n                    maquinaHTML.textContent = maquina.nombre;\r\n                    maquinaHTML.dataset.id = maquina.id;\r\n    \r\n                    // anadir al html\r\n                    listadoMaquinas.appendChild(maquinaHTML);\r\n                })\r\n\r\n            }else{\r\n                const noResultado = document.createElement('P');\r\n                noResultado.classList.add('listado-maquinas__no-resultado');\r\n                noResultado.textContent = 'No hay resultados';\r\n                listadoMaquinas.appendChild(noResultado);\r\n            }\r\n\r\n\r\n\r\n          \r\n        }\r\n\r\n    }\r\n})();\r\n\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n    const filtroVentas = document.querySelector('#filtros_ventas');\r\n    if (filtroVentas) {\r\n        filtroVentas.addEventListener('input', function () {\r\n            const filtro = this.value.toLowerCase();\r\n            const filas = document.querySelectorAll('#tabla .table__tr');\r\n\r\n            filas.forEach(fila => {\r\n                const id = fila.cells[0].textContent.toLowerCase();\r\n                const nombreCliente = fila.cells[1].textContent.toLowerCase();\r\n                const nombreProducto = fila.cells[2].textContent.toLowerCase();\r\n                const codigoProducto = fila.cells[3].textContent.toLowerCase();\r\n                const estado = fila.cells[4].textContent.toLowerCase();\r\n\r\n                console.log(id, nombreCliente, nombreProducto, codigoProducto, estado);\r\n\r\n                if (\r\n                    id.includes(filtro) || \r\n                    nombreCliente.includes(filtro) || \r\n                    nombreProducto.includes(filtro) || \r\n                    codigoProducto.includes(filtro) || \r\n                    estado.includes(filtro)\r\n                ) {\r\n                    fila.style.display = ''; // Mostrar fila\r\n                } else {\r\n                    fila.style.display = 'none'; // Ocultar fila\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n","(function(){\r\nconst apiUrl = `${location.origin}/admin/api/ApiMateriaPrima`; // URL de la API\r\nlet ultimaDeteccion = {}; // Almacena la última detección de códigos\r\nconst bloqueoTiempo = 2000; // Tiempo de espera en milisegundos\r\n\r\n// Mostrar notificación en la parte inferior\r\nfunction mostrarNotificacion(mensaje) {\r\n    const notificacion = document.getElementById(\"notificacion\");\r\n    notificacion.textContent = mensaje;\r\n    notificacion.classList.add(\"mostrar\");\r\n\r\n    // Ocultar la notificación después de 3 segundos\r\n    setTimeout(() => {\r\n        notificacion.classList.remove(\"mostrar\");\r\n    }, 3000);\r\n}\r\n\r\n// Inicializar el escáner\r\nfunction iniciarEscaner() {\r\n    Quagga.init(\r\n        {\r\n            inputStream: {\r\n                type: \"LiveStream\",\r\n                target: document.querySelector(\"#scanner\"),\r\n                constraints: {\r\n                    facingMode: \"environment\",\r\n                    width: 400,\r\n                    height: 250,\r\n                },\r\n            },\r\n            decoder: { readers: [\"code_128_reader\"] },\r\n        },\r\n        function (err) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            Quagga.start();\r\n        }\r\n    );\r\n\r\n    Quagga.onDetected((data) => {\r\n        const codigoEscaneado = data.codeResult.code;\r\n        const ahora = new Date().getTime();\r\n\r\n        // Verificar si el código fue detectado recientemente\r\n        if (ultimaDeteccion[codigoEscaneado] && ahora - ultimaDeteccion[codigoEscaneado] < bloqueoTiempo) {\r\n            return; // Ignorar detección duplicada\r\n        }\r\n\r\n        ultimaDeteccion[codigoEscaneado] = ahora; // Actualizar tiempo de detección\r\n        console.log(\"Código detectado:\", codigoEscaneado);\r\n        buscarProducto(codigoEscaneado);\r\n    });\r\n}\r\n\r\n// Buscar producto en la API\r\nasync function buscarProducto(codigo) {\r\n    const status = document.getElementById(\"status\");\r\n    try {\r\n        const response = await fetch(apiUrl);\r\n        if (!response.ok) throw new Error(\"Error al cargar la API\");\r\n        const productos = await response.json();\r\n\r\n        // Buscar el producto que coincide con el código de barras\r\n        const producto = productos.find((p) => p.barcode === codigo);\r\n\r\n        if (producto) {\r\n            status.textContent = `Producto ${codigo} encontrado. Redirigiendo...`;\r\n            status.style.color = \"#28a745\";\r\n\r\n            // Mostrar notificación\r\n            mostrarNotificacion(`Producto encontrado: Redirigiendo al ID ${producto.id}`);\r\n\r\n            // Redirigir a la URL con el ID del producto después de 3 segundos\r\n            setTimeout(() => {\r\n                window.open(`${location.origin}/admin/produccion/materia/editar?id=${producto.id}`, '_blank');\r\n            }, 3000);\r\n\r\n        } else {\r\n            status.textContent = `Código ${codigo} no encontrado en la base de datos.`;\r\n            status.style.color = \"#dc3545\";\r\n\r\n            // Mostrar notificación\r\n            mostrarNotificacion(`Código ${codigo} no encontrado.`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error al buscar el producto:\", error);\r\n        status.textContent = \"Error al buscar el producto.\";\r\n        status.style.color = \"#dc3545\";\r\n\r\n        // Mostrar notificación\r\n        mostrarNotificacion(\"Error al buscar el producto.\");\r\n    }\r\n}\r\n\r\n// Iniciar el escáner\r\niniciarEscaner();\r\n\r\n} ) ();"]}