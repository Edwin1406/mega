{"version":3,"sources":["alertas.js","app.js","cotizador.js","dist/alertas.dev.js","dist/app.dev.js","dist/cotizador.dev.js"],"names":["alertaCotizador","document","querySelector","setTimeout","remove","maquinaInput","maquinas","maquinasFiltradas","listadoMaquinas","async","url","location","origin","respuesta","fetch","resultado","json","arrayMaquinas","map","maquina","nombre","trim","id","console","log","formatearMaquinas","obtenerMaquinas","addEventListener","e","busqueda","target","value","length","expresion","RegExp","filter","toLowerCase","search","firstChild","removeChild","forEach","maquinaHTML","createElement","classList","add","textContent","dataset","appendChild","noResultado","mostrarMaquinas","test","liner_id","pedido_id","pedido2_id","bobinaInterna_id","bobinaIntermedia_id","bobinaExterna_id","ApiPedidos","apipedidos","ApiPedido2","apipedido2","ApiTest","apitest","ApiBobinas","apibobinas","ApiBobina_externa","apibobinasExterna","ApiBobina_media","apibobinasMedia","mostrarAlerta","titulo","mensaje","tipo","color","fondo","Swal","fire","title","text","icon","iconColor","confirmButtonText","confirmButtonColor","background","customClass","popup","sumargramaje","bobinaInterna","bobinaExterna","bobinaMedia","gramajeInterna","parseFloat","gramaje","gramajeExterna","gramajeMedia","gramajeTotal","pesoTest","peso","anchoInterno","ancho","anchoMedia","anchoExterno","verificarAnchoBobinas","getElementById","liner_interno","liner_medio","liner_externo","sumarAnchosPedidos","anchoPedido1","anchoPedido2","allbobinas","error","AllBobinas","anchoTotal","bobinasFiltradas","bobina","anchoBobina","bobinasSinDuplicados","anchosVistos","Set","has","push","bobinaIdeal","sort","a","b","Math","abs","bobinaconRefile","AllPedidos","liner","pedido","pedido2","bobinaIntermedia","name","allanchospedidos","pedidoSeleccionado","seleccionado","testNormal","anchoEncontrado","todos","find","suma","pruebasuma","testscripting","scripting","ect","scripting2","scripting3","scripting4","resultList","innerHTML","listItem","listItem2","listItem3","listItem4","scriptingTest","includes","testPedido","testN","TestPedido","arguments","undefined","concat","regeneratorRuntime","_context","prev","next","awrap","sent","stop","copiaTest","copiaBobinas","copiarDatos","_context2","t0","_context3","_context4"],"mappings":"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","file":"bundle.js","sourcesContent":["(function() {\r\n\r\n    const alertaCotizador = document.querySelector('div .exito');\r\n    if(alertaCotizador) {\r\n        setTimeout(() => {\r\n            alertaCotizador.remove();\r\n        }, 3000);\r\n    }\r\n\r\n\r\n})();","(function(){\r\n    const maquinaInput = document.querySelector('#maquina_id');\r\n    if(maquinaInput){\r\n        let maquinas= [];\r\n        let maquinasFiltradas = [];\r\n\r\n        const listadoMaquinas = document.querySelector('#listado-maquinas');\r\n        obtenerMaquinas();\r\n\r\n        maquinaInput.addEventListener('input',buscarMaquinas);\r\n\r\n        async function obtenerMaquinas(){\r\n            const url = `${location.origin}/admin/api/maquinas`;;\r\n            const respuesta = await fetch(url);\r\n            resultado = await respuesta.json();\r\n            formatearMaquinas(resultado);\r\n        }\r\n\r\n\r\n        function formatearMaquinas(arrayMaquinas=[]){\r\n            maquinas = arrayMaquinas.map(maquina => {\r\n                return {\r\n                    nombre: `${maquina.nombre.trim()}`,\r\n                    id: maquina.id\r\n                }\r\n            });\r\n\r\n            console.log(maquinas);\r\n\r\n        }\r\n\r\n\r\n        function buscarMaquinas(e){\r\n           const busqueda = e.target.value;\r\n\r\n           if(busqueda.length>3){\r\n            const expresion = new RegExp(busqueda, 'i');\r\n            maquinasFiltradas = maquinas.filter(maquina =>{\r\n                if(maquina.nombre.toLowerCase().search(expresion) != -1){\r\n                    return maquina;\r\n\r\n                }\r\n            });\r\n           }else{\r\n                maquinasFiltradas = [];\r\n           }\r\n           mostrarMaquinas();\r\n        }\r\n\r\n        function mostrarMaquinas(){\r\n            while(listadoMaquinas.firstChild){\r\n                listadoMaquinas.removeChild(listadoMaquinas.firstChild);\r\n            }\r\n\r\n            if(maquinasFiltradas.length >0){\r\n                maquinasFiltradas.forEach (maquina =>{\r\n                    const maquinaHTML = document.createElement('LI');\r\n                    maquinaHTML.classList.add('listado-maquinas__maquina');\r\n                    maquinaHTML.textContent = maquina.nombre;\r\n                    maquinaHTML.dataset.id = maquina.id;\r\n    \r\n                    // anadir al html\r\n                    listadoMaquinas.appendChild(maquinaHTML);\r\n                })\r\n\r\n            }else{\r\n                const noResultado = document.createElement('P');\r\n                noResultado.classList.add('listado-maquinas__no-resultado');\r\n                noResultado.textContent = 'No hay resultados';\r\n                listadoMaquinas.appendChild(noResultado);\r\n            }\r\n\r\n\r\n\r\n          \r\n        }\r\n\r\n    }\r\n})();\r\n\r\n","(function(){\r\n\r\n    let Extratrim = 50;\r\n    console.log(Extratrim);\r\n\r\n    let test ={\r\n        liner_id : '',\r\n        pedido_id : '',\r\n        pedido2_id : '',\r\n        bobinaInterna_id : '',\r\n        bobinaIntermedia_id : '',\r\n        bobinaExterna_id : ''\r\n        }\r\n    \r\n    // obtener datos del api de pedidos\r\n    async function ApiPedidos(){\r\n        const {pedido_id} = test;\r\n        \r\n        try {\r\n            const url = `${location.origin}/admin/api/pedidos?pedido_id=${pedido_id}`;\r\n            const resultado = await fetch(url);\r\n            const apipedidos = await resultado.json();\r\n            console.log(apipedidos);\r\n            return apipedidos\r\n        } catch (e) {\r\n            console.log(e);\r\n                \r\n        }\r\n    } \r\n    async function ApiPedido2(){\r\n        const {pedido2_id} = test;\r\n        \r\n        try {\r\n            const url = `${location.origin}/admin/api/apipedido2?pedido2_id=${pedido2_id}`;\r\n            const resultado = await fetch(url);\r\n            const apipedido2 = await resultado.json();\r\n            console.log(apipedido2);\r\n            return apipedido2\r\n        } catch (e) {\r\n            console.log(e);\r\n                \r\n        }\r\n    } \r\n\r\n    async function AllBobinas(){\r\n        try {   \r\n            const url = `${location.origin}/admin/api/allbobinas`;\r\n            const resultado = await fetch(url);\r\n            const allbobinas = await resultado.json();\r\n            console.log(allbobinas);\r\n            return allbobinas\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // obtener datos del api de test\r\n    async function ApiTest(){\r\n        const {liner_id} = test;\r\n        try {\r\n            const url = `${location.origin}/admin/api/test?liner_id=${liner_id}`;\r\n            const resultado = await fetch(url);\r\n            const apitest = await resultado.json();\r\n            // copiarDatos(apitest);\r\n           console.log(apitest)\r\n           return apitest\r\n        } catch (e) {\r\n          console.log(e);\r\n            \r\n        }\r\n    \r\n    }   \r\n \r\n\r\n    // obtener datos del api de bobinas\r\n\r\n    async function ApiBobinas(){\r\n        const {bobinaInterna_id} = test;\r\n        try {\r\n            const url = `${location.origin}/admin/api/apibobinas?bobinaInterna_id=${bobinaInterna_id}`;\r\n            const resultado = await fetch(url);\r\n            const apibobinas = await resultado.json();\r\n            console.log(apibobinas);\r\n           return apibobinas\r\n           \r\n        } catch (e) {\r\n          console.log(e);\r\n            \r\n        }\r\n    \r\n    }\r\n\r\n\r\n    async function ApiBobina_externa(){\r\n        const {bobinaExterna_id} = test;\r\n        try {\r\n            const url = `${location.origin}/admin/api/apibobina_externa?bobinaExterna_id=${bobinaExterna_id}`;\r\n            const resultado = await fetch(url);\r\n            const apibobinasExterna = await resultado.json();\r\n            console.log(apibobinasExterna);\r\n            // mostrarApibobinas(apibobinas);\r\n            return apibobinasExterna\r\n           \r\n        } catch (e) {\r\n          console.log(e);\r\n            \r\n        }\r\n    \r\n    }\r\n    async function ApiBobina_media(){\r\n        const {bobinaIntermedia_id} = test;\r\n        try {\r\n            const url = `${location.origin}/admin/api/apibobina_media?bobinaIntermedia_id=${bobinaIntermedia_id}`;\r\n            const resultado = await fetch(url);\r\n            const apibobinasMedia = await resultado.json();\r\n            console.log(apibobinasMedia);\r\n            // mostrarApibobinas(apibobinas);\r\n            return apibobinasMedia\r\n           \r\n        } catch (e) {\r\n          console.log(e);\r\n            \r\n        }\r\n    \r\n    }\r\n\r\n\r\n    // FUNCION PARA MOSTRAR ALERTA \r\n\r\n    function mostrarAlerta(titulo,mensaje,tipo,color,fondo){\r\n        Swal.fire({ \r\n            title: titulo,\r\n            text: mensaje,\r\n            icon: tipo,\r\n            iconColor: color,  // Color del ícono\r\n            confirmButtonText: \"Entendido\",\r\n            confirmButtonColor: \"#3085d6\",\r\n            background: fondo, // Color de fondo del cuadro de alerta\r\n            color: \"#000000\", // Color del texto\r\n            customClass: {\r\n                popup: 'swal-wide'  // Clase CSS personalizada para ajustar el ancho\r\n            },\r\n        });\r\n       \r\n    }\r\n\r\n    // FUNCION PARA SUMAR EL GRAMAJE DE LAS BOBINAS Y COMPARAR CON EL TEST\r\n\r\n    async function sumargramaje() {\r\n       // Llamamos a cada API para obtener los datos\r\n        const bobinaInterna = await ApiBobinas();\r\n        const bobinaExterna = await ApiBobina_externa();\r\n        const bobinaMedia = await ApiBobina_media();\r\n        const test = await ApiTest();\r\n\r\n        // Convertimos el gramaje de cada bobina a número y validamos que se hayan recibido correctamente\r\n        const gramajeInterna = parseFloat(bobinaInterna.gramaje) || 0;\r\n        const gramajeExterna = parseFloat(bobinaExterna.gramaje) || 0;\r\n        const gramajeMedia = parseFloat(bobinaMedia.gramaje) || 0;\r\n\r\n        // Calculamos el gramaje total\r\n        const gramajeTotal = gramajeInterna + gramajeExterna + gramajeMedia;\r\n\r\n        // Obtenemos el peso del test para la comparación\r\n        const pesoTest = parseFloat(test.peso);\r\n\r\n        // Verificamos que todas las bobinas tengan un gramaje válido antes de comparar\r\n        if (gramajeInterna > 0 && gramajeExterna > 0 && gramajeMedia > 0) {\r\n            verificarAnchoBobinas();\r\n            if (pesoTest === gramajeTotal) {\r\n                console.log(\"Gramaje total:\", gramajeTotal);\r\n                document.getElementById(\"gramaje_total\").value = gramajeTotal;\r\n                mostrarAlerta('Gramaje correcto',`El gramaje total de las bobinas seleccionadas es: ${gramajeTotal} gr`,'success','#28a745','#d4edda');\r\n\r\n                return gramajeTotal;\r\n            } else {\r\n                \r\n                mostrarAlerta('Gramaje no coincide',`Gramaje recomendado para el test ${test.test} : Int: ${test.liner_interno}` + \"gr, Media: \" + test.liner_medio + \"gr, Externo: \" + test.liner_externo + \"gr\",'error','#ff0000','#f8d7da');\r\n\r\n                document.getElementById(\"gramaje_total\").value = \"\";\r\n                \r\n                return;\r\n            }\r\n        } else {\r\n            console.log(\"Aún no se han seleccionado todas las bobinas necesarias.\");\r\n        }\r\n\r\n    }\r\n\r\n   \r\n        async function verificarAnchoBobinas() {\r\n  \r\n            // Llamamos a cada API para obtener los datos\r\n        const bobinaInterna = await ApiBobinas();\r\n        const bobinaExterna = await ApiBobina_externa();\r\n        const bobinaMedia = await ApiBobina_media();\r\n       // Obtenemos los anchos de las bobinas\r\n        const anchoInterno = parseFloat(bobinaInterna.ancho) || 0;\r\n        const anchoMedia = parseFloat(bobinaMedia.ancho) || 0;\r\n        const anchoExterno = parseFloat(bobinaExterna.ancho) || 0;\r\n\r\n        // Verificamos que los campos de ancho no estén vacíos\r\n        if (anchoInterno && anchoMedia && anchoExterno) {\r\n            // Comprobamos si los anchos son iguales\r\n            if (anchoInterno === anchoMedia && anchoMedia === anchoExterno) {\r\n             // Mostrar la alerta después de 30 segundos\r\n                setTimeout(() => {\r\n                    mostrarAlerta('Ancho correcto', `Los anchos de las bobinas seleccionadas son iguales: ${anchoInterno} cm`, 'success', '#28a745', '#d4edda');\r\n                    \r\n                }, 4000); \r\n\r\n\r\n            } else {\r\n                setTimeout(() => {\r\n                    mostrarAlerta('Anchos incorrectos', `Los anchos de las bobinas seleccionadas no coinciden: Int: ${anchoInterno} cm, Media: ${anchoMedia} cm`,'error','#ff0000','#f8d7da');\r\n                \r\n                    // const bobinaInterna = document.querySelector('[name=\"bobinaInterna_id\"]')\r\n                    // const bobinaIntermedia = document.querySelector('[name=\"bobinaIntermedia_id\"]')\r\n                    // const bobinaExterna = document.querySelector('[name=\"bobinaExterna_id\"]')\r\n                    // bobinaInterna.value = ''\r\n                    // bobinaIntermedia.value = ''\r\n                    // bobinaExterna.value = ''\r\n                }, 4000); \r\n\r\n            }\r\n        } else {\r\n            console.log(\"Error: Los anchos internos y medios deben estar llenos\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // funcion para sumar los anchos de los peddios \r\n\r\n    // async function sumarAnchosPedidos() {\r\n    //     const anchoPedido1 = await ApiPedidos();\r\n    //     const anchoPedido2 = await ApiPedido2();\r\n    //     const allbobinas = await AllBobinas();\r\n    \r\n    //     const pedido1 = parseFloat(anchoPedido1.ancho) || 0;\r\n    //     const pedido2 = parseFloat(anchoPedido2.ancho) || 0;\r\n    \r\n    //     const anchoTotal = pedido1 + pedido2;\r\n    \r\n    //     console.log(\"Ancho total de los pedidos:\", anchoTotal);\r\n    \r\n    //     // Filtrar las bobinas que cumplen las condiciones: ancho >= anchoTotal y <= 2000\r\n    //     const bobinasFiltradas = allbobinas.filter(bobina => {\r\n    //         const anchoBobina = parseFloat(bobina.ancho);\r\n    //         return anchoBobina >= anchoTotal && anchoBobina <= 2000;\r\n    //     });\r\n    \r\n    //     // Eliminar duplicados usando un Set para los anchos\r\n    //     const bobinasSinDuplicados = [];\r\n    //     const anchosVistos = new Set();\r\n    \r\n    //     for (let bobina of bobinasFiltradas) {\r\n    //         const anchoBobina = parseFloat(bobina.ancho);\r\n    //         if (!anchosVistos.has(anchoBobina)) {\r\n    //             bobinasSinDuplicados.push(bobina);\r\n    //             anchosVistos.add(anchoBobina);\r\n    //         }\r\n    //     }\r\n    \r\n    //     // Ordenar las bobinas por la diferencia más pequeña con el anchoTotal\r\n    //     const bobinasOrdenadas = bobinasSinDuplicados.sort((a, b) => {\r\n    //         const diferenciaA = Math.abs(parseFloat(a.ancho) - anchoTotal);\r\n    //         const diferenciaB = Math.abs(parseFloat(b.ancho) - anchoTotal);\r\n    //         return diferenciaA - diferenciaB;\r\n    //     });\r\n    \r\n    //     // Tomar las tres primeras bobinas de la lista ordenada\r\n    //     const tresBobinasIdeales = bobinasOrdenadas.slice(0, 3);\r\n    \r\n    //     // Restar 30mm a cada bobina ideal como refile\r\n    //     tresBobinasIdeales.forEach(bobina => {\r\n    //         bobina.ancho = parseFloat(bobina.ancho) - 30;\r\n    //     });\r\n    \r\n    //     if (tresBobinasIdeales.length > 0) {\r\n               \r\n    //         const bobinaideal = document.getElementById(\"bobinaIdealAncho\");\r\n    //         bobinaideal.innerHTML = tresBobinasIdeales.map(bobina => {\r\n    //         return `<option value=\"${bobina.id}\">${bobina.ancho} mm  sin refile:${bobina.ancho+30}</option>`;\r\n    //         } );\r\n    //     } else {\r\n    //         console.log(\"No se encontraron bobinas que cumplan con los requisitos.\");\r\n    //     }\r\n    // }\r\n    \r\n    \r\n\r\n    async function sumarAnchosPedidos() {\r\n        const anchoPedido1 = await ApiPedidos();\r\n        const anchoPedido2 = await ApiPedido2();\r\n        const allbobinas = await AllBobinas();\r\n\r\n        console.log(anchoPedido1.id);\r\n    \r\n        const pedido1 = parseFloat(anchoPedido1.ancho) || 0;\r\n        const pedido2 = parseFloat(anchoPedido2.ancho) || 0;\r\n    \r\n        const anchoTotal = pedido1 + pedido2;\r\n    \r\n        console.log(\"Ancho total de los pedidos:\", anchoTotal);\r\n    \r\n        // Filtrar las bobinas que cumplen las condiciones: ancho >= anchoTotal y <= 2000\r\n        const bobinasFiltradas = allbobinas.filter(bobina => {\r\n            const anchoBobina = parseFloat(bobina.ancho);\r\n            return anchoBobina >= anchoTotal && anchoBobina <= 2000;\r\n        });\r\n    \r\n        // Eliminar duplicados usando un Set para los anchos\r\n        const bobinasSinDuplicados = [];\r\n        const anchosVistos = new Set();\r\n    \r\n        for (let bobina of bobinasFiltradas) {\r\n            const anchoBobina = parseFloat(bobina.ancho);\r\n            if (!anchosVistos.has(anchoBobina)) {\r\n                bobinasSinDuplicados.push(bobina);\r\n                anchosVistos.add(anchoBobina);\r\n            }\r\n        }\r\n    \r\n        // Ordenar las bobinas por la diferencia más pequeña con el anchoTotal\r\n        const bobinasOrdenadas = bobinasSinDuplicados.sort((a, b) => {\r\n            const diferenciaA = Math.abs(parseFloat(a.ancho) - anchoTotal);\r\n            const diferenciaB = Math.abs(parseFloat(b.ancho) - anchoTotal);\r\n            return diferenciaA - diferenciaB;\r\n        });\r\n    \r\n        // Seleccionar solo la primera bobina ideal y aplicar el refile de -30 mm\r\n        const bobinaIdeal = bobinasOrdenadas[0];\r\n        if (bobinaIdeal) {\r\n            const bobinaconRefile = bobinaIdeal.ancho = parseFloat(bobinaIdeal.ancho);\r\n            mostrarAlerta(\"Bobina ideal encontrada\", `Ancho ideal: ${bobinaIdeal.ancho} mm  -30 : ${bobinaconRefile -30}`, \"success\" , \"#28a745\", \"#d4edda\");\r\n        } else {\r\n            console.log(\"No se encontró una bobina que cumpla con los requisitos.\");\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    // FUNCION ALL PEDIDOS \r\n    AllPedidos();\r\n    async function AllPedidos(){\r\n        try {\r\n            const url = `${location.origin}/admin/api/allpedidos`;\r\n            const resultado = await fetch(url);\r\n            const allpedidos = await resultado.json();\r\n            // console.log(allpedidos);\r\n            return allpedidos\r\n        } catch (e) {\r\n            console.log(e);\r\n                \r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    // FUNCION PRUEBA DE SUMA\r\n\r\n    // async function pruebasuma() {\r\n    //     try {\r\n    //         const test = await ApiTest();\r\n    //         const allanchospedidos = await AllPedidos();\r\n    //         const pedidoSeleccionado = await ApiPedidos();\r\n            \r\n    //         const seleccionado = parseFloat(pedidoSeleccionado.ancho) || 0;\r\n    //         const testNormal = parseFloat(test.test) || 0;\r\n\r\n    //         console.log(`testNormal: ${testNormal}`);\r\n\r\n    //         // Convertimos todos los anchos a número para asegurarnos\r\n    //         allanchospedidos.forEach(todos => {\r\n    //             todos.ancho = parseFloat(todos.ancho);\r\n    //         });\r\n    \r\n    //         // Buscamos el ancho que cumpla con la condición\r\n    //         const anchoEncontrado = allanchospedidos.find(todos => \r\n    //             todos.ancho === seleccionado + 30 || todos.ancho === seleccionado - 30\r\n    //         );\r\n    \r\n    //         if (anchoEncontrado) {\r\n    //             const suma = seleccionado + anchoEncontrado.ancho;\r\n    //             console.log(`Ancho seleccionado: ${seleccionado}`);\r\n    //             console.log(`Ancho encontrado: ${anchoEncontrado.ancho}`);\r\n    //             console.log(`Suma: ${suma}`);\r\n    //         } else {\r\n    //             console.log(\"No se encontró ningún ancho que cumpla con la condición.\");\r\n    //         }\r\n    \r\n    //     } catch (error) {\r\n    //         console.error(\"Error al realizar la suma:\", error);\r\n    //     }\r\n    // }\r\n    \r\n    async function pruebasuma() {\r\n        try {\r\n            const test = await ApiTest();\r\n            const allanchospedidos = await AllPedidos();\r\n            const pedidoSeleccionado = await ApiPedidos();\r\n    \r\n            const seleccionado = parseFloat(pedidoSeleccionado.ancho) || 0;\r\n            const testNormal = parseFloat(test.test) || 0;\r\n    \r\n            console.log(`testNormal: ${testNormal}`);\r\n    \r\n            // Convertimos todos los anchos a número para asegurarnos y filtramos por el mismo test\r\n            const anchosFiltrados = allanchospedidos\r\n                .filter(todos => parseFloat(todos.test) === testNormal)\r\n                .map(todos => ({ ...todos, ancho: parseFloat(todos.ancho) }));\r\n    \r\n            // // Buscamos el ancho que cumpla con la condición dentro de los pedidos filtrados\r\n            // const anchoEncontrado = anchosFiltrados.find(todos => \r\n            //     todos.ancho === seleccionado + 30 || todos.ancho === seleccionado - 30\r\n            // );\r\n\r\n            const anchoEncontrado = anchosFiltrados.find(todos => \r\n                todos.id !== pedidoSeleccionado.id && // Excluye el propio pedido seleccionado\r\n                todos.ancho >= seleccionado - 100 && todos.ancho <= seleccionado + 100\r\n            );\r\n            \r\n            \r\n    \r\n            if (anchoEncontrado) {\r\n                const suma = seleccionado + anchoEncontrado.ancho;\r\n                console.log(`Ancho seleccionado: ${seleccionado}`);\r\n                console.log(`Ancho encontrado: ${anchoEncontrado.ancho}`);\r\n                console.log(`Suma: ${suma}`);\r\n            } else {\r\n                console.log(\"No se encontró ningún ancho que cumpla con la condición.\");\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.error(\"Error al realizar la suma:\", error);\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    // FUNCION TEST IGUAL AL TEST DEL PEDIDO\r\n    async function TestPedido(){\r\n        const testNormal = await ApiTest();\r\n        const testPedido = await ApiPedidos();\r\n\r\n        const testN = parseFloat(testNormal.test);\r\n        const testP = parseFloat(testPedido.test) ?? '';\r\n\r\n\r\n        if(testP=== testN){\r\n            console.log(\"Test coincide\");\r\n            mostrarAlerta(\"Test coincide\", \"El test del pedido coincide con el test del liner\", \"success\", \"#28a745\", \"#d4edda\");\r\n            return\r\n        }else{\r\n            document.querySelector('[name=\"pedido_id\"]').value = '';\r\n            mostrarAlerta(\"Test no coincide\", \"El test del pedido no coincide con el test del liner\", \"error\", \"#ff0000\", \"#f8d7da\");\r\n            return\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n   \r\n    async function scriptingTest() {\r\n        const testscripting = await ApiTest();\r\n\r\n        const scripting = parseFloat(testscripting.ect) || 0;\r\n        const scripting2 = testscripting.liner_interno || 0;\r\n        const scripting3 = testscripting.liner_medio || 0;\r\n        const scripting4 = testscripting.liner_externo || 0;\r\n\r\n        // Obtener el elemento de la lista\r\n        const resultList = document.getElementById('resultList');\r\n\r\n        // Limpiar la lista antes de agregar nuevos elementos\r\n        resultList.innerHTML = '';\r\n\r\n        // Crear nuevos elementos de lista (li)\r\n        const listItem = document.createElement('li');\r\n        listItem.textContent = `Ect: ${scripting}`;\r\n\r\n        const listItem2 = document.createElement('li');\r\n        listItem2.textContent = `Interno: ${scripting2}`;\r\n\r\n        const listItem3 = document.createElement('li');\r\n        listItem3.textContent = `Medio: ${scripting3}`;\r\n\r\n        const listItem4 = document.createElement('li');\r\n        listItem4.textContent = `Externo: ${scripting4}`;\r\n\r\n        // Agregar los nuevos items a la lista\r\n        resultList.appendChild(listItem);\r\n        resultList.appendChild(listItem2);\r\n        resultList.appendChild(listItem3);\r\n        resultList.appendChild(listItem4);\r\n    }\r\n\r\n\r\n\r\n    const pedidos = document.querySelector('#pedido')\r\n\r\n    if(pedidos ){\r\n    const  liner = document.querySelector('[name=\"liner_id\"]')\r\n    const pedido = document.querySelector('[name=\"pedido_id\"]')\r\n    const pedido2 = document.querySelector('[name=\"pedido2_id\"]')\r\n    const bobinaInterna = document.querySelector('[name=\"bobinaInterna_id\"]')\r\n    const bobinaIntermedia = document.querySelector('[name=\"bobinaIntermedia_id\"]')\r\n    const bobinaExterna = document.querySelector('[name=\"bobinaExterna_id\"]')\r\n\r\n    liner.addEventListener('change', busqueda)\r\n    pedido.addEventListener('change', busqueda)\r\n    pedido2.addEventListener('change', busqueda)\r\n    bobinaInterna.addEventListener('change', busqueda)\r\n    bobinaIntermedia.addEventListener('change', busqueda)\r\n    bobinaExterna.addEventListener('change', busqueda)\r\n\r\n    \r\n\r\n    function busqueda (e){\r\n\r\n    // los pedidos no pueden ser iguales\r\n    if ((e.target.name === 'pedido_id' || e.target.name === 'pedido2_id') && pedido.value === pedido2.value) {\r\n        pedido2.value = ''\r\n        mostrarAlerta(\"Pedido ya seleccionado\", \"No puede seleccionar el mismo pedido\", \"error\", \"#ff0000\", \"#f8d7da\");\r\n        return    \r\n\r\n    }else{\r\n        test[e.target.name] = e.target.value.trim()\r\n        console.log(test)\r\n        ApiBobinas();\r\n        ApiTest();\r\n        ApiBobina_externa();\r\n        ApiBobina_media();\r\n        sumargramaje();\r\n        ApiPedidos();\r\n        ApiPedido2();\r\n        // prueba \r\n        pruebasuma();\r\n\r\n\r\n        scriptingTest();\r\n        if (['pedido_id'].includes(e.target.name) &&\r\n        document.querySelector('[name=\"pedido_id\"]').value) {\r\n            TestPedido();\r\n        }\r\n\r\n        \r\n        if (['pedido_id','pedido2_id'].includes(e.target.name) &&\r\n        document.querySelector('[name=\"pedido_id\"]').value &&\r\n        document.querySelector('[name=\"pedido2_id\"]').value) {\r\n            sumarAnchosPedidos();\r\n        \r\n        }\r\n    \r\n     }\r\n\r\n    }\r\n    }\r\n\r\n\r\nconsole.log('cotizador.js');\r\n\r\n\r\n})();","\"use strict\";\r\n\r\n(function () {\r\n  var alertaCotizador = document.querySelector('div .exito');\r\n\r\n  if (alertaCotizador) {\r\n    setTimeout(function () {\r\n      alertaCotizador.remove();\r\n    }, 3000);\r\n  }\r\n})();","\"use strict\";\r\n\r\n(function () {\r\n  var maquinaInput = document.querySelector('#maquina_id');\r\n\r\n  if (maquinaInput) {\r\n    var obtenerMaquinas = function obtenerMaquinas() {\r\n      var url, respuesta;\r\n      return regeneratorRuntime.async(function obtenerMaquinas$(_context) {\r\n        while (1) {\r\n          switch (_context.prev = _context.next) {\r\n            case 0:\r\n              url = \"\".concat(location.origin, \"/admin/api/maquinas\");\r\n              ;\r\n              _context.next = 4;\r\n              return regeneratorRuntime.awrap(fetch(url));\r\n\r\n            case 4:\r\n              respuesta = _context.sent;\r\n              _context.next = 7;\r\n              return regeneratorRuntime.awrap(respuesta.json());\r\n\r\n            case 7:\r\n              resultado = _context.sent;\r\n              formatearMaquinas(resultado);\r\n\r\n            case 9:\r\n            case \"end\":\r\n              return _context.stop();\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    var formatearMaquinas = function formatearMaquinas() {\r\n      var arrayMaquinas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n      maquinas = arrayMaquinas.map(function (maquina) {\r\n        return {\r\n          nombre: \"\".concat(maquina.nombre.trim()),\r\n          id: maquina.id\r\n        };\r\n      });\r\n      console.log(maquinas);\r\n    };\r\n\r\n    var buscarMaquinas = function buscarMaquinas(e) {\r\n      var busqueda = e.target.value;\r\n\r\n      if (busqueda.length > 3) {\r\n        var expresion = new RegExp(busqueda, 'i');\r\n        maquinasFiltradas = maquinas.filter(function (maquina) {\r\n          if (maquina.nombre.toLowerCase().search(expresion) != -1) {\r\n            return maquina;\r\n          }\r\n        });\r\n      } else {\r\n        maquinasFiltradas = [];\r\n      }\r\n\r\n      mostrarMaquinas();\r\n    };\r\n\r\n    var mostrarMaquinas = function mostrarMaquinas() {\r\n      while (listadoMaquinas.firstChild) {\r\n        listadoMaquinas.removeChild(listadoMaquinas.firstChild);\r\n      }\r\n\r\n      if (maquinasFiltradas.length > 0) {\r\n        maquinasFiltradas.forEach(function (maquina) {\r\n          var maquinaHTML = document.createElement('LI');\r\n          maquinaHTML.classList.add('listado-maquinas__maquina');\r\n          maquinaHTML.textContent = maquina.nombre;\r\n          maquinaHTML.dataset.id = maquina.id; // anadir al html\r\n\r\n          listadoMaquinas.appendChild(maquinaHTML);\r\n        });\r\n      } else {\r\n        var noResultado = document.createElement('P');\r\n        noResultado.classList.add('listado-maquinas__no-resultado');\r\n        noResultado.textContent = 'No hay resultados';\r\n        listadoMaquinas.appendChild(noResultado);\r\n      }\r\n    };\r\n\r\n    var maquinas = [];\r\n    var maquinasFiltradas = [];\r\n    var listadoMaquinas = document.querySelector('#listado-maquinas');\r\n    obtenerMaquinas();\r\n    maquinaInput.addEventListener('input', buscarMaquinas);\r\n  }\r\n})();","\"use strict\";\r\n\r\n(function () {\r\n  var test = {\r\n    liner_id: '',\r\n    pedido_id: '',\r\n    pedido2_id: '',\r\n    bobinaInterna_id: '',\r\n    bobinaIntermedia_id: '',\r\n    bobinaExterna_id: ''\r\n  };\r\n  var copiaTest = [];\r\n  var copiaBobinas = []; // obtener datos del api de test\r\n\r\n  function ApiTest() {\r\n    var liner_id, url, resultado, apitest;\r\n    return regeneratorRuntime.async(function ApiTest$(_context) {\r\n      while (1) {\r\n        switch (_context.prev = _context.next) {\r\n          case 0:\r\n            liner_id = test.liner_id;\r\n            _context.prev = 1;\r\n            url = \"\".concat(location.origin, \"/admin/api/test?liner_id=\").concat(liner_id);\r\n            _context.next = 5;\r\n            return regeneratorRuntime.awrap(fetch(url));\r\n\r\n          case 5:\r\n            resultado = _context.sent;\r\n            _context.next = 8;\r\n            return regeneratorRuntime.awrap(resultado.json());\r\n\r\n          case 8:\r\n            apitest = _context.sent;\r\n            copiarDatos(apitest);\r\n            console.log(apitest);\r\n            _context.next = 16;\r\n            break;\r\n\r\n          case 13:\r\n            _context.prev = 13;\r\n            _context.t0 = _context[\"catch\"](1);\r\n            console.log(_context.t0);\r\n\r\n          case 16:\r\n          case \"end\":\r\n            return _context.stop();\r\n        }\r\n      }\r\n    }, null, null, [[1, 13]]);\r\n  }\r\n\r\n  function ApiBobinas() {\r\n    var bobinaInterna_id, url, resultado, apibobinas;\r\n    return regeneratorRuntime.async(function ApiBobinas$(_context2) {\r\n      while (1) {\r\n        switch (_context2.prev = _context2.next) {\r\n          case 0:\r\n            bobinaInterna_id = test.bobinaInterna_id;\r\n            _context2.prev = 1;\r\n            url = \"\".concat(location.origin, \"/admin/api/apibobinas?bobinaInterna_id=\").concat(bobinaInterna_id);\r\n            _context2.next = 5;\r\n            return regeneratorRuntime.awrap(fetch(url));\r\n\r\n          case 5:\r\n            resultado = _context2.sent;\r\n            _context2.next = 8;\r\n            return regeneratorRuntime.awrap(resultado.json());\r\n\r\n          case 8:\r\n            apibobinas = _context2.sent;\r\n            console.log(apibobinas);\r\n            copiarDatos(apibobinas);\r\n            _context2.next = 16;\r\n            break;\r\n\r\n          case 13:\r\n            _context2.prev = 13;\r\n            _context2.t0 = _context2[\"catch\"](1);\r\n            console.log(_context2.t0);\r\n\r\n          case 16:\r\n          case \"end\":\r\n            return _context2.stop();\r\n        }\r\n      }\r\n    }, null, null, [[1, 13]]);\r\n  }\r\n\r\n  function copiarDatos(apitest, apibobinas) {\r\n    copiaTest = apitest;\r\n    copiaBobinas = apibobinas;\r\n    console.log(\"copia de test:\".concat(copiaTest));\r\n    console.log(\"copia de bobinas:\".concat(copiaBobinas));\r\n  }\r\n\r\n  function ApiBobina_externa() {\r\n    var bobinaExterna_id, url, resultado, apibobinas;\r\n    return regeneratorRuntime.async(function ApiBobina_externa$(_context3) {\r\n      while (1) {\r\n        switch (_context3.prev = _context3.next) {\r\n          case 0:\r\n            bobinaExterna_id = test.bobinaExterna_id;\r\n            _context3.prev = 1;\r\n            url = \"\".concat(location.origin, \"/admin/api/apibobina_externa?bobinaExterna_id=\").concat(bobinaExterna_id);\r\n            _context3.next = 5;\r\n            return regeneratorRuntime.awrap(fetch(url));\r\n\r\n          case 5:\r\n            resultado = _context3.sent;\r\n            _context3.next = 8;\r\n            return regeneratorRuntime.awrap(resultado.json());\r\n\r\n          case 8:\r\n            apibobinas = _context3.sent;\r\n            console.log(apibobinas); // mostrarApibobinas(apibobinas);\r\n\r\n            _context3.next = 15;\r\n            break;\r\n\r\n          case 12:\r\n            _context3.prev = 12;\r\n            _context3.t0 = _context3[\"catch\"](1);\r\n            console.log(_context3.t0);\r\n\r\n          case 15:\r\n          case \"end\":\r\n            return _context3.stop();\r\n        }\r\n      }\r\n    }, null, null, [[1, 12]]);\r\n  }\r\n\r\n  function ApiBobina_media() {\r\n    var bobinaIntermedia_id, url, resultado, apibobinas;\r\n    return regeneratorRuntime.async(function ApiBobina_media$(_context4) {\r\n      while (1) {\r\n        switch (_context4.prev = _context4.next) {\r\n          case 0:\r\n            bobinaIntermedia_id = test.bobinaIntermedia_id;\r\n            _context4.prev = 1;\r\n            url = \"\".concat(location.origin, \"/admin/api/apibobina_media?bobinaIntermedia_id=\").concat(bobinaIntermedia_id);\r\n            _context4.next = 5;\r\n            return regeneratorRuntime.awrap(fetch(url));\r\n\r\n          case 5:\r\n            resultado = _context4.sent;\r\n            _context4.next = 8;\r\n            return regeneratorRuntime.awrap(resultado.json());\r\n\r\n          case 8:\r\n            apibobinas = _context4.sent;\r\n            console.log(apibobinas); // mostrarApibobinas(apibobinas);\r\n\r\n            _context4.next = 15;\r\n            break;\r\n\r\n          case 12:\r\n            _context4.prev = 12;\r\n            _context4.t0 = _context4[\"catch\"](1);\r\n            console.log(_context4.t0);\r\n\r\n          case 15:\r\n          case \"end\":\r\n            return _context4.stop();\r\n        }\r\n      }\r\n    }, null, null, [[1, 12]]);\r\n  }\r\n\r\n  var pedidos = document.querySelector('.pedidos');\r\n\r\n  if (pedidos) {\r\n    var busqueda = function busqueda(e) {\r\n      // los pedidos no pueden ser iguales\r\n      if ((e.target.name === 'pedido_id' || e.target.name === 'pedido2_id') && pedido.value === pedido2.value) {\r\n        pedido2.value = '';\r\n        Swal.fire(\"Pedido ya seleccionado\", \"No puede seleccionar el mismo pedido\", \"error\");\r\n        return;\r\n      } else {\r\n        test[e.target.name] = e.target.value.trim();\r\n        console.log(test);\r\n        ApiBobinas();\r\n        ApiTest();\r\n        ApiBobina_externa();\r\n        ApiBobina_media();\r\n      }\r\n    };\r\n\r\n    var liner = document.querySelector('[name=\"liner_id\"]');\r\n    var pedido = document.querySelector('[name=\"pedido_id\"]');\r\n    var pedido2 = document.querySelector('[name=\"pedido2_id\"]');\r\n    var bobinaInterna = document.querySelector('[name=\"bobinaInterna_id\"]');\r\n    var bobinaIntermedia = document.querySelector('[name=\"bobinaIntermedia_id\"]');\r\n    var bobinaExterna = document.querySelector('[name=\"bobinaExterna_id\"]');\r\n    liner.addEventListener('change', busqueda);\r\n    pedido.addEventListener('change', busqueda);\r\n    pedido2.addEventListener('change', busqueda);\r\n    bobinaInterna.addEventListener('change', busqueda);\r\n    bobinaIntermedia.addEventListener('change', busqueda);\r\n    bobinaExterna.addEventListener('change', busqueda);\r\n  }\r\n})();"]}